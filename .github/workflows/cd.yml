name: cd pipline

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key:  ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Setup logging
            LOGFILE="/home/${{ secrets.SSH_USERNAME }}/deployment_$(date +%Y%m%d_%H%M%S).log"
            exec > >(tee -a $LOGFILE) 2>&1
            echo "Starting deployment at $(date)"
            
            # Create and set up project directory
            echo "Setting up project directory..."
            sudo mkdir -p /home/${{ secrets.SSH_USERNAME }}
            sudo chown ${{ secrets.SSH_USERNAME }}:${{ secrets.SSH_USERNAME }} /home/${{ secrets.SSH_USERNAME }}
            
            # Update package index and install dependencies
            echo "Updating system packages..."
            sudo apt-get update -y || { echo "Failed to update packages"; exit 1; }
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common || { echo "Failed to install dependencies"; exit 1; }
            
            
            # Handle repository deployment
            cd /home/${{ secrets.SSH_USERNAME }}
            
            # Clone repository if it doesn't exist
            if [ ! -d "Telex-test" ]; then
                echo "First deployment - cloning repository..."
                git clone https://github.com/telexintegrations/Django-Jira-Integration.git || { echo "Failed to clone repository"; exit 1; }
            fi
            
            cd Telex-test/
            echo "Updating code from repository..."
            if ! git remote | grep -q "origin2"; then
                echo "Adding origin2 remote..."
                git remote add origin2 https://github.com/telexintegrations/Django-Jira-Integration.git
            fi
            
            # Fetch and update from the remote
            git fetch origin2 || { echo "Failed to fetch from origin2"; exit 1; }
            git reset --hard origin2/master || { echo "Failed to reset to origin2/master"; exit 1; }
            
             # Stop any existing Gunicorn processes so the new code is picked up
            echo "Stopping existing Gunicorn processes (if any)..."
            pkill gunicorn || echo "No Gunicorn process found."
            
            # Check if virtual environment exists, create if it doesn't
            if [ -d "venv" ]; then
            echo "Removing existing virtual environment..."
            rm -rf venv
            fi
            
            echo "Creating virtual environment..."
            # Install Python 3.10 venv if not already installed
            sudo apt-get install -y python3.10-venv || { echo "Failed to install python3.10-venv"; exit 1; }
            # Use python3.10 explicitly to create the virtual environment
            python3.10 -m venv venv || { echo "Failed to create virtual environment"; exit 1; }
            
            echo "Activating virtual environment..."
            source venv/bin/activate || { echo "Failed to activate virtual environment"; exit 1; }
            
            echo "Installing Python dependencies..."
            pip install -r requirements.txt || { echo "Failed to install Python requirements"; exit 1; }
            
             # Install Nginx
            sudo apt-get install -y nginx || { echo "Failed to install nginx"; exit 1; }
            
            # Copy your pre-existing nginx.conf from the repository to the proper location
            echo "Copying Nginx configuration..."
            sudo cp $(pwd)/nginx.conf /etc/nginx/sites-available/telex || { echo "Failed to copy nginx.conf"; exit 1; }
            sudo ln -sf /etc/nginx/sites-available/telex /etc/nginx/sites-enabled/
            sudo nginx -t || { echo "Nginx configuration test failed"; exit 1; }
            sudo systemctl restart nginx || { echo "Failed to restart nginx"; exit 1; }
            
            # Start Gunicorn server in the background
            echo "Starting Gunicorn server..."
            nohup gunicorn telex_test.wsgi:application --bind 127.0.0.1:8000 --workers 3 > gunicorn.log 2>&1 &
            
            # Collect static files
            echo "Collecting static files..."
            python manage.py collectstatic --noinput || { echo "Failed to collect static files"; exit 1; }
          
            
            echo "Deployment completed successfully at $(date)"